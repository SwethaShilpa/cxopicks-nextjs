import Head from 'next/head';
import { useState } from 'react';
import { Multiselect } from "multiselect-react-dropdown";
import Toast from '../components/toast';  

export async function getStaticProps() {
    const res = await fetch('https://dev-buyer-api.cxospace.co/public/all/industries')
    const data = await res.json()
    if (!data) {
      return {
        notFound: true,
      }
    }
    return {
      props: { data }, 
    }
}
    
export default function Home(props) {
    const [productImage, setProductImage] = useState('');
    const [productName, setProductName] = useState('');
    const [productDescription, setProductDescription] = useState('');
    const [targetIndustry, setTargetIndustry] = useState([]);
    const [website, setWebsite] = useState('');
    const [certifications, setCertifications] = useState([]);
    const [deployment, setDeployment] = useState([]);
    const [submitted, setSubmitted] = useState(false);
    const [certificateOptions, setCertificateOptions] = useState(
        [
            { label: "Team Lead Certificate" , value: "teamLeadCertificate"}, { label: "Business Certificate" , value: "businessCertificate"},
            { label: "Sales Certificate" , value: "salesCertificate"}, { label: "Talent Certificate" , value: "talentCertificate"},
            { label: "Global Certificate" , value: "globalCertificate"}, { label: "membership Certificate" , value: "membershipCertificate"}
        ]
    );
    const checkboxList = props.data.data.industries;
    
    const handleChange = (e) => {
        const checked = e.target.checked;
        const checkedValue = e.target.value;
        var beforeValue = deployment.includes(checkedValue);
        if(checked && !beforeValue) {
            setDeployment([...deployment, checkedValue])
        } else if(!checked && beforeValue) {
            setDeployment(deployment.filter(item => item != checkedValue));        
        }        
    };

    const onCancel = () => {    
        setProductImage('');
        setProductName('');
        setProductDescription('');
        setTargetIndustry([]);
        setWebsite('');
        setCertifications([]);
        setDeployment([]);
        setSubmitted(false);
    }

    const onContinue = () => {
        setSubmitted(true);
        if (!productName || !productDescription || !website) {
            return;
        } else {
            onCancel();
            Toast('success', "Submitted Successfully");
        }
    }

    return (
        <>
            <Head>
                <title>Cxopicks | Product</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="page-wrapper">
                <div className="col-lg-12 col-md-12 col-12 p-0">
                    <h2 className="page_heading">Product Details</h2>
                </div>
                <div className="grey_box_bg">
                    <div className="content-wrapper">
                        <div className="card-body p-0 my-4">
                            <div className="mx-0 form_fields_grey_bg">
                                <div className="row m-0 bor_btm_span">
                                    <div className="upload_photo_bg col-5">
                                    {productImage == '' ? 
                                        (
                                            <i className="fa fa-file-image-o fa-3x" aria-hidden="true"></i>
                                        ) : (
                                            <img
                                                src={productImage}
                                                className=""
                                                alt="Profile Picture" 
                                                width="100" 
                                                height="100" 
                                            />
                                        )
                                    }
                                    </div>
                                    <div className="col-7 text-md-left">
                                        <span className="upload-profile-label">Upload your Logo</span>
                                        <span className="d-block to-choose-a-file">
                                            <input type="file" 
                                            id="actual-btn" 
                                            onChange={(e) => setProductImage(URL.createObjectURL(e.target.files[0]))} 
                                            hidden 
                                            accept="image/*"/>
                                            <label htmlFor="actual-btn" className="blue_link">Click here </label>to choose a file<br/>
                                        </span>
                                    </div>                                        
                                </div>
                                <div className="row">
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Product Name <span className="required-red">*</span></label>
                                        <input type="text" 
                                        className={"form-control " + ((submitted && !productName) ? "is-invalid" : "")} 
                                        name="productName" 
                                        value={productName} 
                                        placeholder="Type here" 
                                        onChange={(e) => setProductName(e.target.value)} />
                                        {submitted && !productName && (
                                            <span id="email-error" className="error invalid-feedback" >Product Name is Required</span>
                                        )}
                                    </div>
                                </div>
                                <div className="row">
                                    <div className="form-group col-md-8">
                                        <label className="form-label">Product Description <span className="required-red">*</span></label>
                                        <textarea className={"form-control " + ((submitted && !productDescription) ? "is-invalid" : "")} name="productDescription" value={productDescription} placeholder="Type here" onChange={(e) => setProductDescription(e.target.value)} rows="8"></textarea>
                                        {submitted && !productDescription && (
                                            <span id="email-error" className="error invalid-feedback" >Product Description is Required</span>
                                        )}
                                    </div>
                                </div>
                                <div className="row">
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Product Target Industry <span className="required-red">*</span></label>
                                        <div className="multi_sel_dropdown">
                                            <Multiselect
                                                className="basic-single-select"
                                                options={checkboxList}
                                                displayValue="industry_name"
                                                id="targetIndustry"
                                                showCheckbox={true}
                                                placeholder="Select here"
                                                value={targetIndustry}
                                                selectedValues={targetIndustry}
                                                onSelect={(e) => setTargetIndustry(e) } 
                                                onRemove={(e) => setTargetIndustry(e) } 
                                            />
                                            <span className="arrow_select_drop"><i class="fas fa-chevron-down"></i></span>
                                        </div>
                                        {submitted && targetIndustry.length == 0 && (
                                            <span id="email-error" className="text-danger" >Product Target Industry is Required</span>
                                        )}
                                    </div>
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Product Website <span className="required-red">*</span></label>
                                        <input type="text" className={"form-control " + ((submitted && !website) ? "is-invalid" : "")} 
                                        name="website" value={website} placeholder="Type here" onChange={(e) => setWebsite(e.target.value)}/>
                                        {submitted && !website && (
                                            <span id="email-error" className="error invalid-feedback">Product Website is Required</span>
                                        )}
                                    </div>
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Product Certifications</label>
                                        <div className="multi_sel_dropdown">
                                            <Multiselect
                                                options={certificateOptions}
                                                displayValue="label"
                                                showCheckbox={true}
                                                placeholder="Select here"
                                                value={certifications}
                                                id="targetIndustry"
                                                selectedValues={certifications}
                                                onSelect={(e) => setCertifications(e) } 
                                                onRemove={(e) => setCertifications(e) } 
                                            />
                                            <span className="arrow_select_drop"><i class="fas fa-chevron-down"></i></span>
                                        </div>
                                    </div>
                                </div>
                                <div className="form-group col-md-4">
                                    <label className="form-label">Product Deployment</label>
                                    <div>
                                        <div class="form-check form-check-inline me-5 ps-0">
                                            <input class="form-check-input" checked={deployment.find((ch) => ch == "cloud")}  onChange={handleChange} type="checkbox" id="inlineCheckbox1" value="cloud" />
                                            <label class="form-check-label" for="inlineCheckbox1">Cloud</label>
                                        </div>
                                        <div class="form-check form-check-inline me-5 ps-0">
                                            <input class="form-check-input" checked={deployment.find((ch) => ch == "hosted")}  onChange={handleChange} type="checkbox" id="inlineCheckbox2" value="hosted" />
                                            <label class="form-check-label" for="inlineCheckbox2">Hosted</label>
                                        </div>
                                        <div class="form-check form-check-inline me-5 ps-0">
                                            <input class="form-check-input" checked={deployment.find((ch) => ch == "selfHosted")}  onChange={handleChange} type="checkbox" id="inlineCheckbox3" value="selfHosted"/>
                                            <label class="form-check-label" for="inlineCheckbox3">Self Hosted</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className="col-12 buttons-group">
                                <button className="grey_btn_bg mx-3" onClick={onCancel}> Cancel </button>
                                <button className="yellow-btn"
                                    onClick={(e) => { 
                                        e.currentTarget.blur();
                                        onContinue();
                                    }} 
                                >
                                    Continue
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )
}
